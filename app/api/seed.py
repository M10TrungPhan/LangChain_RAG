'''
seed.py users the models in model.py and populates the database with dummy content
'''

# ----------------
# Database imports
# ----------------
from helpers import (
    create_org_by_org_or_uuid,
    create_project_by_org,
    create_document_by_file_path,
    get_org_by_uuid_or_namespace
)
from config import (
    FILE_UPLOAD_PATH,
    logger
)
from util import (
    get_file_hash
)
import os

# --------------------
# Create organizations
# --------------------

organizations = [
    {
    'display_name': 'Knowledge Handbooks',
    'namespace': 'knowledge handbooks',
    'projects': [
        {
            'display_name': 'B√≥n ph√¢n',
            'docs': [
                'knowledge_handbooks_B√≥n_ƒë·∫°m_cho_l√∫a_v√†o_th·ªùi_k·ª≥_n√†o_l√†_t·ªët_nh·∫•t.md',
                'knowledge_handbooks_C√°ch_b√≥n_l√≥t_cho_c√†_ph√™_tr·ªìng_m·ªõi.md',
                'knowledge_handbooks_C√°ch_b√≥n_ph√¢n_chu·ªìng_cho_rau_m√†u_hi·ªáu_qu·∫£_nh·∫•t.md',
                'knowledge_handbooks_C√≥_c·∫ßn_b√≥n_ph√¢n_h·ªØu_c∆°_cho_ƒë·∫•t_ph√®n_kh√¥ng.md',
                'knowledge_handbooks_B√≥n_v√¥i_ƒë√∫ng_quy_tr√¨nh_cho_v∆∞·ªùn_c√¢y_ƒÉn_tr√°i.md'           
            ]
        },
        {
            'display_name': 'Ph√≤ng tr·ªã s√¢u b·ªánh',
            'docs': [                
                'knowledge_handbooks_Cam_s√†nh_ra_b√¥ng__b·ªã_m∆∞a_nhi·ªÅu_c·∫ßn_l√†m_g√¨.md',
                'knowledge_handbooks_C√°ch_chƒÉm_s√≥c_l√∫a_giai_ƒëo·∫°n_ƒë√≤ng_tr·ªï_gi√∫p_tƒÉng_nƒÉng_su·∫•t_hi·ªáu_qu·∫£.md',
                'knowledge_handbooks_C√°ch_kh·∫Øc_ph·ª•c_b∆∞·ªüi_da_xanh_b·ªã_v√†ng_ƒë·ªçt.md',
                'knowledge_handbooks_C√°ch_kh·∫Øc_ph·ª•c_hi·ªán_t∆∞·ª£ng_n·ª©t_tr√°i_tr√™n_c√¢y_tr·ªìng.md',
                'knowledge_handbooks_C√°ch_kh·∫Øc_ph·ª•c_m√≠t_x∆°_ƒëen.md',
                'knowledge_handbooks_C√°ch_ph√≤ng_tr·ªã_s√¢u_v·∫Ω_b√πa_tr√™n_c√¢y_cam.md',
                'knowledge_handbooks_C√°ch_ph√≤ng_tr·ª´_b·ªánh_kh√¥_c√†nh_kh√¥_qu·∫£_g√¢y_h·∫°i_c√¢y_c√†_ph√™.md',
                'knowledge_handbooks_C√°ch_tr·ªã_s√¢u_v·∫Ω_b√πa_tr√™n_b∆∞·ªüi.md'
            ]
        },
        {
            'display_name': 'K·ªπ thu·∫≠t n√¥ng nghi·ªáp',
            'docs': [
                'knowledge_handbooks_3_b∆∞·ªõc_c·∫£i_t·∫°o_ƒë·∫•t_sau_thu_ho·∫°ch_ƒë·ªëi_v·ªõi_v∆∞·ªùn_c√¢y_ƒÉn_tr√°i.md',
                'knowledge_handbooks_C√¢y_c√†_ph√™_gi√†_c·ªói_th√¨_ph·∫£i_l√†m_th·∫ø_n√†o.md',
                'knowledge_handbooks_C√°ch_l√†m_cho_hoa_c√†_ph√™_ra_ƒë·ªìng_lo·∫°t.md',
                'knowledge_handbooks_C√°ch_t∆∞·ªõi_n∆∞·ªõc_cho_m√¥_h√¨nh_tr·ªìng_h·ªì_ti√™u_xen_c√†_ph√™.md',
                'knowledge_handbooks_C·∫ßn_l√†m_g√¨_sau_khi_thu_ho·∫°ch_s·∫ßu_ri√™ng.md',
                'knowledge_handbooks_D·ª©t_ƒëi·ªÉm_r·ªáp_s√°p__r·∫ßy_tr·∫Øng_·ªü_ph·∫ßn_r·ªÖ.md',
                'knowledge_handbooks_Gi·ªØ_·∫©m_cho_ƒë·∫•t_trong_m√πa_kh√¥_nh∆∞_th·∫ø_n√†o.md',
                'knowledge_handbooks_Gi√¥ÃÅng_caÃÄ_ph√™_v·ªëi_naÃÄo_ch√¢ÃÅt_l∆∞∆°Ã£ng_t·ªët_nh√¢ÃÅt_hi·ªán_nay.md',
                'knowledge_handbooks_Kinh_nghi·ªám_chƒÉm_s√≥c_s·∫ßu_ri√™ng_giai_ƒëo·∫°n_nu√¥i_tr√°i_non_hi·ªáu_qu·∫£.md',
                'knowledge_handbooks_K√≠ch_th∆∞·ªõc_ph·∫≥ng_c·ªßa_b·∫ßu_∆∞∆°m_c√†_ph√™_ra_sao.md',
                'knowledge_handbooks_K·ªπ_thu·∫≠t_c·∫Øt_t·ªâa_c√†nh_v√†_t·∫°o_t√°n_cho_c√†_ph√™.md'
            ]
        }],

},
    {
    'display_name': 'Category Trees',
    'namespace': 'category trees',
    'projects': [
        {
            'display_name': 'C√¢y ƒÉn qu·∫£',
            'docs': [
                'category_trees_D·ª´a.md',
                'category_trees_D·ª´a_n∆∞·ªõc__d·ª´a_l√°.md',
                'category_trees_Chu·ªëi_r·∫Ω_qu·∫°t.md',
                'category_trees_S·∫ßu_ri√™ng.md',
                'category_trees_M√≠a.md'

            ]
        },
        {
            'display_name': 'C√¢y n√¥ng nghi·ªáp, c√¥ng nghi·ªáp',
            'docs': [                
                'category_trees_C√†_ph√™.md',
                'category_trees_H·ªì_ti√™u.md',
                'category_trees_L√∫a.md'
            ]
        },
        {
            'display_name': 'C√¢y hoa',
            'docs': [    
                'category_trees_L√¥_h√¥Ã£i__nha_ƒëam.md',            
                'category_trees_Hoa_ly.md',
                'category_trees_Lan_Cattleya.md',
                'category_trees_Lan_Chi.md',
                'category_trees_Lan_chu_ƒë√≠nh.md',
                'category_trees_Lan_d·∫°_h∆∞∆°ng.md',
                'category_trees_Lan_Vanda.md',
                'category_trees_Lay_∆°n.md',
                'category_trees_L·∫ª_b·∫°n__soÃÄ_huy√™ÃÅt__bang_hoa.md',
                'category_trees_Sen_ƒë√°.md'
            ]
        },
        {
            'display_name': 'C√¢y c·∫£nh',
            'docs': [
                'category_trees_L·ª•c_biÃÄnh.md',
                'category_trees_Phong_L·ªôc_Hoa.md',
                'category_trees_Thi√™n_tu√™ÃÅ.md',
                'category_trees_Th·ªët_n·ªët.md',
                'category_trees_Th·ªßy_tr√∫c__l√°c_d√π.md',
                'category_trees_Th·ªßy_t√πng.md',
                'category_trees_Tre_m·∫°nh_t√¥ng.md',
                'category_trees_Tr·∫Øc_b√°_di·ªáp.md',
                'category_trees_V·∫°n_tu√™ÃÅ.md',
                'category_trees_ƒê·∫°i_t∆∞·ªõng_qu√¢n.md',
                'category_trees_ƒê·ªßng_ƒë·ªânh.md',
                'category_trees_Cau.md',
                'category_trees_Cau_b·∫π_ƒë·ªè__Cau_ki·ªÉng_ƒë·ªè.md',
                'category_trees_Cau_b·ª•ng__Cau_Vua.md',
                'category_trees_Cau_ki·ªÉng_v√†ng__Cau_ƒëu√¥i_ph∆∞·ª£ng.md',
                'category_trees_Cau_ti·ªÉu_tr√¢m.md',
                'category_trees_C·ªç_c·∫£nh.md',
                'category_trees_C·ªç_d·∫ßu__d·ª´a_d·∫ßu.md'
            ]
        },
        {
            'display_name': 'Rau c·ªß qu·∫£',
            'docs': [
                'category_trees_C·ªß_nƒÉng__m√£_th·∫ßy.md',
                'category_trees_G·ª´ng.md',
                'category_trees_S·∫£.md',
                'category_trees_Hu·ª≥nh_tinh.md',
                'category_trees_Khoai_ng·ªçt__khoai_m·ª°.md',
                'category_trees_Khoai_t·ª´.md',
                'category_trees_Kim_ch√¢m__hoa_hi√™n__huy√™n_th·∫£o.md',
                'category_trees_K√™.md',
                'category_trees_MƒÉng_t√¢y.md',
                'category_trees_Rau_hoa_chu·ªëi.md',
                'category_trees_Ngh·ªá.md',
                'category_trees_N·∫•m_linh_chi.md',
                'category_trees_S√¢m_ƒë·∫°i_h√†nh__t·ªèi_L√†o__h√†nh_L√†o.md'

            ]
        }]

}
]

training_data_path = os.path.join(os.path.dirname(__file__), f'{FILE_UPLOAD_PATH}/training_data')

for org in organizations:
    try:
        org_obj = create_org_by_org_or_uuid(
            display_name=org['display_name'],
            namespace=org['namespace']
        )
    except:
        org_obj = get_org_by_uuid_or_namespace(org['namespace'],  should_except=False)
    logger.debug(f'üè†  Created organization: {org_obj.display_name}')

    if 'projects' not in org:
        continue

    for project in org['projects']:
        project['organization'] = org_obj

        project_obj = create_project_by_org(
            organization_id=org_obj,
            display_name=project['display_name']
        )
        logger.debug(f'üóÇÔ∏è  Created project: {project_obj.display_name}')

        project_uuid = str(project_obj.uuid)
        org_uuid = str(org_obj.uuid)

        # if the directory does not exist, create it
        if not os.path.exists(os.path.join(FILE_UPLOAD_PATH, org_uuid, project_uuid)):
            os.mkdir(os.path.join(FILE_UPLOAD_PATH, org_uuid, project_uuid))

        if 'docs' not in project:
            continue

        for doc in project['docs']:
            file_path = os.path.join(training_data_path, doc)

            # check if file exists
            if os.path.isfile(file_path):
                file_hash = get_file_hash(file_path)
                # try:
                create_document_by_file_path(
                    organization=org_obj,
                    project=project_obj,
                    file_path=file_path,
                    file_hash=file_hash
                )
                # except:
                #      logger.info(f'  ‚ùå  Created document: {doc}')
                logger.info(f'  ‚úÖ  Created document: {doc}')

            else:
                logger.error(f' ‚ùå  Document not found: {doc}')